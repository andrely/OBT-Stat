class Disambiguator
  attr_accessor :text, :hunpos_stream, :evaluator

  def initialize(evaluator)
    # @text = text
    # @hunpos_stream = hunpos_stream
    @evaluator = evaluator

    @hunpos_seek_buf = nil
  end

  def disambiguate
    # get input
    @text = Text.new
    OBNOText.parse @text, ARGF.read
    
    # run hunpos
    i, @hunpos_stream, e = Open3.popen3 $hunpos_command
    
    # TODO: check what is actually passed to hunpos. Bug in OBNO paerser ???
    @text.sentences.each do |s|
      s.words.each do |w|
        i.puts w.string
      end
    end
    
    i.close
    e.close
    
    @text.sentences.each do |s|
      s.words.each do |w|
        disambiguate_word(w)
        
      end
    end
  end

  def disambiguate_word(word)
    hun_word, hun_tag = get_hunpos_output

    # sanity check on input position
    # raise RuntimeError, hun_word, word.string if hun_word != word.string
    raise RuntimeError, "Illegal hunpos word", hun_word + "-" + word.string if not validate_hunpos_output(word, hun_word)

    selected_tag = nil

    # not ambigious
    if word.tags.count == 1
      selected_tag = word.tags.first

      # ambigious
    else
      # fetch tags
      tags = word.tags.collect {|t| t.clean_out_tag}

      # use hunpos tag if found, just take the first tag otherwise
      if tags.include? hun_tag
        $stderr.puts "ambiguity hunpos tag #{hun_tag} chosen"

        selected_tag = word.tag_by_string(hun_tag)

        raise RuntimeError if selected_tag.nil?
      else
        $stderr.puts "ambiguity ob tag #{word.tags.first.clean_out_tag} chosen"

        selected_tag = ob_select_tag(word.tags)
      end
    end

    puts word.string + "\t" + selected_tag.clean_out_tag + "\t" + selected_tag.lemma
  end

  # Selects a tag from available tags generated by OB heuristically
  def ob_select_tag(ob_tags)
    # Current heuristic is to just select the first tag
    return ob_tags.first
  end

  def get_hunpos_output
    if not @hunpos_seek_buf.nil?
      hun_line = @hunpos_seek_buf
      @hunpos_seek_buf = nil
    else
      hun_line = @hunpos_stream.gets.strip  
    end

    # puts hun_line

    return hun_line.split(/\s/)
  end

  def validate_hunpos_output(word, hunpos_word)
    if hunpos_word == word.string
      return true
    end
    
    if word.string.match("^#{hunpos_word}")
      puts "matched"

      next_hunpos_word = peek_hunpos_word
      # puts next_hunpos_word

      if hunpos_word + " " + next_hunpos_word == word.string
        # puts "again"
        get_hunpos_output
        return true
      end
    end

    return nil
  end

  def peek_hunpos_word
    line = @hunpos_stream.gets.strip

    puts "peek: " + line

    raise RuntimeError if not @hunpos_seek_buf.nil?
    @hunpos_seek_buf = line

    return line.split(/\s/).first
  end
end
